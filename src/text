- create repository
- initialize the repository
- node_modules,package.json,package-lock.json
- install express
- create a server
- listen to port 7777
- write request handler for /test, /hello
- install nodemon and update scripts inside package.json
- what are dependencies
- what is the use of -g  after npm install
- difference between caret and tilda

- initialize git -> git init
- .gitignore
- create a remote repo on github
- push all code to remote origin
- play with route and route extension ex. hello, /,hello/2, hello/xyz
- order of the route matter alot
- install postman app and create workspace/ collection -> for api calls
- write a logic to handle GET, POST,DELETE, PUT api call and test them on postman
- Explore routing and use of ?,+,(),* in the routes
- use of regex in routes /a/,/.*fly$/
- Reading the query paramsin the routes
- Reading the dynamic routes in the routes

| Symbol | Meaning                                 | Example     | Matches               |
| ------ | --------------------------------------- | ----------- | --------------------- |
| `?`    | Optional (0 or 1) of the preceding char | `/colou?r`  | `/color`, `/colour`   |
| `+`    | One or more of the preceding char       | `/go+gle`   | `/google`, `/gooogle` |
| `*`    | Wildcard (matches any chars)            | `/ab*cd`    | `/abcd`, `/ab123cd`   |
| `()`   | Grouping / Optional group               | `/item(s)?` | `/item`, `/items`     |


-multiple route handlers - play with the code
-next()
-next function and errors along with the res.send()
-app.use("/route",rH,[rH1,rH2, rH3 ]);
-what is middleware
-How express js basically handles the request behind the scene
-Difference between app.use and app.all
app.use:
Used to register middleware that applies to all HTTP methods (GET, POST, PUT, etc.) at a given path (and its subpaths).
app.all
Used to handle all HTTP methods (GET, POST, etc.) at an exact route.

Feature	               app.use()	                     app.all()
Matches all methods	   ✅ Yes	                        ✅ Yes
Path matching	       ✅ Prefix match (e.g. /api/*)	    ❌ Exact only (e.g. /api)
Sub-paths	           ✅ Yes	                        ❌ No
Use case	          Middleware (logging, auth, etc.)	         Catch-all route handler
Can send response?	    ❌ Not typically (but can)	     ✅ Yes

-what is middleware and why we need it
Middleware is a function that gets access to the request (req), response (res), and the next function (next) in the cycle of handling a request.
Middleware lets you hook into the request-response cycle and do things before the final response is sent.
Middleware is:

A function that runs before your final response.

Used to process, protect, or modify requests/responses.

Essential to build clean, modular, and secure Express apps.

-write a dummy auth middleware for admin
-write a dummy auth middleware for all the user routes, except /user/login
-error handling using app.use("/",(err,res,req,next)={});
and it is used at the end of code
-create a free cluster on mongodb official website(Mongo atlas)
-install mongoose library
-connect your application to the database "connection-url/devTinder"
-call the connectDB function and connect the database before starting the application on 3000
-create a user schema and user Model
-create POST/signup using API to add data to the database
-push some documents by api call from postman
-error handling using try and catch
-what is the difference between json and javascript object
-Add the express.json middleware to your app
-make your signup api dynamic to receive data from the end user
-User.findOne with dulplicate email ids, which object returned
-API- get user by email
-API- feed api - GET/FEED- get all the data from the user database
-API- get user by id
-create delete user api
-diffrence between patch and put
-api- update a user
-Explore the mongoose documentation for Model methods
-what are the options in a Model.findOneAndUpdate method, and explore about it.
🟢 MongoDB
MongoDB is a NoSQL database. It stores data in a flexible, JSON-like format called BSON (Binary JSON).

✅ Key Features:
Document-based (instead of tables and rows like SQL).

Schema-less (you can store different structures in the same collection).

Fast and scalable.

Uses collections and documents:

Collection = like a table in SQL.

Document = like a row, but stored as a JSON object.

🟣 Mongoose
Mongoose is an Object Data Modeling (ODM) library for Node.js and MongoDB.

✅ What Mongoose Does:
Provides a schema-based structure for your MongoDB documents.

Allows you to define models, validations, methods, and hooks.

Translates JavaScript objects into MongoDB documents and vice versa.

🔄 Mongoose and MongoDB Relationship:
MongoDB is the database.

Mongoose is the tool/library that helps you interact with it in a structured way.

🧠 Analogy:
Think of MongoDB as a warehouse full of unorganized goods (data), and Mongoose as a manager that:

Labels shelves (schemas)

Ensures correct packaging (validation)

Helps move data in/out cleanly (models & queries)

-Explore schemaType options from the documentation
-add require, unique,lowercase, min,maxLength, trim
-Add default value
-Create a custom validator function for gender
-Improve the db schema - PUT all appropriate validtaions on each field in schema
-add API level validation on Patch request and signup api validation
-install validator
-Explore validator library function and use validator function for password, email and photo url;
-never trust req.body
-validate data in signup api
-install bcrypt package
-create passwordHash using bcrypt.hash and save the user is excrupted password
-create login api 
-compare passwords and throw new errors if email and password is invalid

-install the cookie-parse
-just send a dummy cookie to user
-create get/profile api just check if you get the cookie back
-install jasonwebtoken
-In login api, after email and passowrd validation, create a jwt token and send it to user in
-read the cookie inside your profile api and find the logged in user
-Auth Middleware
-add the userAuth middleware in profile api and a new sendConnection request Api
-set the expire of jwt token  and cookies to 7 days
-create userSchema method to getJWT()
-create userSchema method to comparepassword(passwordInput)

-explore tinder api
-create a list of all api you can think of dev tinder
-group multiple routes under respective routes
-read documentation for express.Router
-create route folder for managing auth, profile and request route
-create authRouter, profileRouter,requestRouter
-Import these routers in app.js
-create POST/logout api
-create PATCH/profile/edit
-create PATCH/profile/password API => forgot password api
-make you validate all your data in every POST and Patch please 